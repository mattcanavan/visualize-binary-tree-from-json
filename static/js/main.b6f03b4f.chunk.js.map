{"version":3,"sources":["components/InputForm.js","utils/measureHeight.js","components/Output.js","utils/buildArrayForEachLevel.js","utils/treeClass.js","App.js","utils/buildTreeFromJSON.js","utils/breadthFirstTraversal.js","reportWebVitals.js","index.js"],"names":["InputForm","props","setUserInput","className","name","type","placeholder","onChange","e","userInput","target","value","measure_height","tree","left_height","left","right_height","right","Math","max","Output","React","useState","levels","setLevels","BFTarray","JSONtree","useEffect","arrayIn","row_and_nodes","0","1","2","3","4","5","6","undefined","lh","rh","max_height","results","i","start","end","push","slice","build_array_for_each_level","console","log","map","index","join","repeat","Tree","this","App","setJSONtree","setBFTarray","jsonIn","build_tree","root_data","new_node","JSON","parse","build_tree_from_json","queue","length","node","shift","breadth_first_traversal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6f03b4f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/// STYLES ///\r\nimport './InputForm.css';\r\n\r\n/// PLACEHOLDER VALUE ///\r\nconst example = `\r\n\r\nPASTE JSON HERE...\r\n\r\nEXAMPLE:\r\n\r\n{\r\n    \"value\": 5,\r\n    \"left\": {\r\n        \"value\": 7,\r\n        \"left\": null,\r\n        \"right\": null\r\n    },\r\n    \"right\": {\r\n        \"value\": 22,\r\n        \"left\": {\r\n            \"value\": 17,\r\n            \"left\": null,\r\n            \"right\": null\r\n        },\r\n        \"right\": {\r\n            \"value\": 9,\r\n            \"left\": null,\r\n            \"right\": null\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport default function InputForm(props) {\r\n\r\n    /// PROPS ///\r\n    const { setUserInput } = props\r\n\r\n    return (\r\n      <div className=\"input__container\">\r\n        <form>\r\n          <label>\r\n            <h1>USER INPUT</h1>\r\n          </label>\r\n\r\n          {/* TEXT AREA / USER INPUT */}\r\n          <textarea\r\n            className=\"field\"\r\n            name=\"textarea\"\r\n            type=\"textarea\"\r\n            placeholder={example}\r\n            onChange={(e) => {\r\n                setUserInput({ userInput: e.target.value })\r\n            }}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n","//measure height of tree\r\nfunction measure_height(tree) {\r\n  if (tree === null) {\r\n    return 0;\r\n  }\r\n\r\n  let left_height = measure_height(tree.left);\r\n  let right_height = measure_height(tree.right);\r\n\r\n  let results = Math.max(left_height, right_height);\r\n\r\n  return results + 1;\r\n}\r\n\r\nexport { measure_height }\r\n","import React from 'react';\r\n\r\n/// STYLE ///\r\nimport './Output.css';\r\n\r\n/// UTILS ///\r\nimport { build_array_for_each_level } from '../utils/buildArrayForEachLevel.js';\r\n\r\nexport default function Output(props) {\r\n\r\n    /// LOCAL STATE ///\r\n    const [levels, setLevels] = React.useState([\r\n        [5],\r\n        [7, 22],\r\n        ['None', 'None', 17, 9],\r\n    ]);\r\n\r\n    /// PROPS ///\r\n    const { BFTarray, JSONtree } = props;\r\n\r\n    /// useEFFECT ///\r\n    React.useEffect( () => {\r\n        setLevels(build_array_for_each_level(BFTarray, JSONtree))\r\n        console.log('levels', levels)\r\n    }, [BFTarray, JSONtree])\r\n\r\n\r\n    /// Display nothing if there's no BFTarray\r\n    if (!BFTarray){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"output__container\">\r\n            <h1>OUTPUT</h1>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            {levels && levels.map((value, index) => {\r\n                return <h2 key={index}>{value.join(`${'\\xa0'.repeat(index)}`)}</h2>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import { measure_height } from './measureHeight.js'\r\n\r\n//draw tree (pyramid)\r\nfunction build_array_for_each_level(arrayIn, tree) {\r\n  // for each row, how many nodes are possible\r\n  const row_and_nodes = {\r\n    // row: nodes\r\n    0: 1,\r\n    1: 2,\r\n    2: 4,\r\n    3: 8,\r\n    4: 16,\r\n    5: 32,\r\n    6: 64,\r\n  };\r\n\r\n  // how can i avoid doing this?\r\n  if (tree === undefined) {\r\n    return null;\r\n  }\r\n\r\n  // first, measure tree height w/given function\r\n  let lh = measure_height(tree.left);\r\n  let rh = measure_height(tree.right);\r\n  const max_height = Math.max(lh, rh);\r\n\r\n  // now, we know how many levels to make\r\n  const results = [];\r\n  for (let i = 0; i <= max_height; i++) {\r\n\r\n    // calc slicing indices\r\n    let start = row_and_nodes[i] - 1;\r\n    let end = row_and_nodes[i + 1] - 1; //not inclusive\r\n\r\n    // slice returns an array that represents a level, store these levels in another array\r\n    results.push(arrayIn.slice(start, end));\r\n  }\r\n  return results;\r\n}\r\n\r\nexport { build_array_for_each_level }","class Tree {\r\n    constructor(value) {\r\n      this.value = value;\r\n      this.left = null;\r\n      this.right = null;\r\n    }\r\n  }\r\n\r\nexport { Tree }","import React from 'react';\r\nimport './App.css';\r\n\r\n/// COMPONENTS ///\r\nimport InputForm from './components/InputForm.js';\r\nimport Output from './components/Output.js';\r\n\r\n/// UTILS ///\r\nimport { build_tree_from_json } from './utils/buildTreeFromJSON.js';\r\nimport { breadth_first_traversal } from './utils/breadthFirstTraversal.js';\r\n\r\n\r\nfunction App() {\r\n  /// INITIAL STATE ///\r\n  const [userInput, setUserInput] = React.useState({\r\n    userInput: `{\r\n    \"value\": 5,\r\n    \"left\": {\r\n        \"value\": 7,\r\n        \"left\": null,\r\n        \"right\": null\r\n    },\r\n    \"right\": {\r\n        \"value\": 22,\r\n        \"left\": {\r\n            \"value\": 17,\r\n            \"left\": null,\r\n            \"right\": null\r\n        },\r\n        \"right\": {\r\n            \"value\": 9,\r\n            \"left\": null,\r\n            \"right\": null\r\n        }\r\n    }\r\n}`,\r\n  });\r\n  const [JSONtree, setJSONtree] = React.useState();\r\n  const [BFTarray, setBFTarray] = React.useState();\r\n\r\n  /// useEFFECT ///\r\n  // 1. build JSONtree on any changes to userInput field\r\n  React.useEffect(() => {\r\n    setJSONtree(build_tree_from_json(userInput.userInput));\r\n  }, [userInput]);\r\n\r\n  // 2. build bread_first_trav array on any changes to JSONtree\r\n  React.useEffect(() => {\r\n    setBFTarray(breadth_first_traversal(JSONtree));\r\n  }, [JSONtree]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App__flexcontainer\">\r\n\r\n        <InputForm setUserInput={setUserInput} userInput={userInput} />\r\n\r\n        <Output BFTarray={BFTarray} JSONtree={JSONtree} />\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Tree } from './treeClass.js'\r\n\r\n  function build_tree_from_json(jsonIn) {\r\n    function build_tree(root_data) {\r\n\r\n      // bug if this statement is missing\r\n      if (root_data === undefined){\r\n        return null\r\n      }\r\n\r\n      if (root_data === null) {\r\n        return null;\r\n      }\r\n\r\n      let new_node = new Tree(root_data[\"value\"]);\r\n      new_node.left = build_tree(root_data[\"left\"]);\r\n      new_node.right = build_tree(root_data[\"right\"]);\r\n\r\n      return new_node;\r\n    }\r\n\r\n    try{\r\n      const root = build_tree(JSON.parse(jsonIn)); //where should we be parsing the userInput??\r\n  \r\n      return root;\r\n    }\r\n    catch{\r\n      // hacky solution to JSON parsing error \r\n    }\r\n  }\r\n\r\nexport { build_tree_from_json }","// outputs breadth first traversal array for given JSON tree\r\n\r\nfunction breadth_first_traversal(tree){\r\n\r\n    // catch null case\r\n    if (tree === null){\r\n      return null\r\n    }\r\n\r\n    const results = [];\r\n    const queue = [];\r\n    queue.push(tree);\r\n\r\n    while (queue.length > 0) {\r\n      let node = queue.shift();\r\n\r\n       //unsure how to fix this bug\r\n      if (node === undefined){\r\n        break\r\n      }\r\n\r\n      if (node === \"None\") {\r\n        results.push(\"None\")\r\n        continue\r\n      } else {\r\n        results.push(node.value)\r\n      }\r\n\r\n      // check left\r\n      if (node.left === null) {\r\n        queue.push(\"None\")\r\n      } else{\r\n        queue.push(node.left)\r\n      }\r\n\r\n      // check right\r\n      if (node.right === null) {\r\n        queue.push(\"None\")\r\n      } else{\r\n        queue.push(node.right)\r\n      }\r\n    }\r\n    return results\r\n  }\r\n\r\n  export { breadth_first_traversal }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}